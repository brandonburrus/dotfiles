priority 50

# Keywords

snippet const "Const"
const $1 = $0;
endsnippet

snippet cond "Const destructure"
const { $1 } = $0;
endsnippet

snippet let "Let"
let $1 = $0;
endsnippet


# Importing

snippet im "Import"
import '$1';$0
endsnippet


snippet imr "Import React"
import React from 'react';$0
endsnippet


snippet imd "Import Default"
import $2 from '$1';$0
endsnippet


snippet imf "Import-From"
import { $2 } from '$1';$0
endsnippet



snippet imt "Import for test"
import `!p snip.rv = snip.basename.replace('.test', '')` from './`!p snip.rv = snip.basename.replace('.test', '')`';$0
endsnippet


# snippet ims "Import css module styles"
# import styles from './`!p snip.rv = snip.basename`.module.css';$0
# endsnippet


snippet ims "Import scss module styles"
import styles from './`!p snip.rv = snip.basename`.module.scss';$0
endsnippet


# Exporting

snippet exd "Export default"
export default $1;
endsnippet


# Statements

snippet forin "For-in loop"
for (const ${1:item} in ${2:collection}) {
  ${VISUAL}$0
}
endsnippet


snippet forof "For-of loop"
for (const ${1:item} of ${2:collection}) {
  ${VISUAL}$0
}
endsnippet


# React

snippet dp "Destructure Props"
const { $1 } = props;
endsnippet


snippet pt "Prop Types" i
propTypes = {
  $0
};
endsnippet


# React

snippet fc "Function component"
import React from 'react';

/**
 * ${1:TODO: Add Documentation}
 */
const `!p snip.rv = snip.basename`: React.FC = () => {
  return ${0:<p>`!p snip.rv = snip.basename`</p>}
}

export default `!p snip.rv = snip.basename`;
endsnippet


snippet fcp "Function component + Props"
import React from 'react';

/**
 * ${1:TODO: Add Documentation}
 */
const `!p snip.rv = snip.basename` = (props) => {
  const { $2 } = props;

  return ${0:<p>`!p snip.rv = snip.basename`</p>}
}

export default `!p snip.rv = snip.basename`;
endsnippet


# React Hooks

snippet us "useState function"
const [$1, set`!p snip.rv = t[1].capitalize()`] = useState($2);$0
endsnippet


snippet ue "useEffect function"
useEffect(() => {
  $2
}, [$1]);$0
endsnippet


snippet ur "useReducer function"
const [state, dispatch] = useReducer($1);$0
endsnippet


snippet uc "useContext function"
const $1 = useContext($2);$0
endsnippet


snippet uref "useRef function"
const $1 = useRef($2);$0
endsnippet


snippet ucb "useCallback function"
const $1 = useCallback(() => {
  $0
}, [$2]);
endsnippet


snippet um "useMemo function"
const $1 = useMemo(() => {
  $0
}, [$2]);
endsnippet


snippet udv "useDebugValue function"
useDebugValue();
endsnippet


# Console

snippet log "Default logging"
console.log($1);$0
endsnippet


snippet loge "Log error"
console.error($1);$0
endsnippet


snippet logw "Log warning"
console.warn($1);$0
endsnippet


snippet logt "Log tabble"
console.table($1);$0
endsnippet


# Writing Unit Tests

snippet utest "Jest unit test scaffold" b
import `!p snip.rv = snip.basename.replace('.test', '')` from './`!p snip.rv = snip.basename.replace('.test', '')`';

describe('`!p snip.rv = snip.basename.replace('.test', '')`', () => {
  $0
});
endsnippet

snippet csmoke "Jest React component unit test smoke test" b
test('renders without crashing', () => {
  const { container } = $1render(<`!p snip.rv = snip.basename.replace('.test', '')` />);
  expect(container).toBeDefined();
});$0
endsnippet

snippet desc "Jest 'describe' unit test block" b
describe('$1', () => {
  $0
});
endsnippet


snippet test "Jest 'test' unit test block" b
test('$1', () => {
  $0
});
endsnippet


snippet atest "Jest 'test' async unit test block" b
test('$1', async () => {
  $0
});
endsnippet


snippet testt "Jest 'todo' unit test block" b
test.todo('$1');$0
endsnippet


snippet aa "Jest 'afterAll' unit test block" b
afterAll(() => {
  $0
});
endsnippet


snippet ae "Jest 'afterEach' unit test block" b
afterEach(() => {
  $0
});
endsnippet


snippet ba "Jest 'beforeAll' unit test block" b
beforeAll(() => {
  $0
});
endsnippet


snippet be "Jest 'beforeEach' unit test block" b
beforeEach(() => {
  $0
});
endsnippet


# Unit Test Matchers

snippet ex "Expect function"
expect($1)$0
endsnippet


snippet exa "Expect anything" i
expect.anything()
endsnippet


snippet exac "Expect Array Containing" i
expect.arrayContaining($1)
endsnippet


snippet exha "Expect Has Assertions" i
expect.hasAssertions()
endsnippet


snippet exsc "Expect String Containing" i
expect.stringContaining($1)
endsnippet


snippet exsm "Expect String Matching" i
expect.stringMatching($1)
endsnippet


snippet exoc "Expect Object Containing" i
expect.objectContaining($1)
endsnippet


snippet tbd "toBeDefined function" i
toBeDefined();$0
endsnippet


snippet tb "toBe function" i
toBe($1);$0
endsnippet


snippet thbc "toHaveBeenCalled function" i
toHaveBeenCalled();$0
endsnippet


snippet thbct "toHaveBeenCalledTimes function" i
toHaveBeenCalledTimes($1);$0
endsnippet


snippet thbcw "toHaveBeenCalledWith function" i
toHaveBeenCalledWith($1);$0
endsnippet


snippet thblcw "toHaveBeenLastCalledWith function" i
toHaveBeenLastCalledWith($1);$0
endsnippet


snippet thbncw "toHaveBeenNthCalledWith function" i
toHaveBeenNthCalledWith($1);$0
endsnippet


snippet thr "toHaveReturned function" i
toHaveReturned();$0
endsnippet


snippet thrt "toHaveReturnedTimes function" i
toHaveReturnedTimes($1);$0
endsnippet


snippet thrw "toHaveReturnedWith function" i
toHaveReturnedWith($1);$0
endsnippet


snippet thlrw "toHaveLastReturned function" i
toHaveLastReturnedWith($1);$0
endsnippet


snippet thnrw "toHaveNthReturnedWith function" i
toHaveNthReturnedWith($1);$0
endsnippet


snippet thl "toHaveLength function" i
toHaveLength($1);$0
endsnippet


snippet thp "toHaveProperty function" i
toHaveProperty($1);$0
endsnippet


snippet tbct "toBeCloseTo function" i
toBeCloseTo($1);$0
endsnippet


snippet tbf "toBeFalsy function" i
toBeFalsy();$0
endsnippet


snippet tbgt "toBeGreaterThan function" i
toBeGreaterThan($1);$0
endsnippet


snippet tbgte "toBeGreaterThanOrEqual function" i
toBeGreaterThanOrEqual($1);$0
endsnippet


snippet tblt "toBeLessThan function" i
toBeLessThan($1);$0
endsnippet


snippet tblte "toBeLessThanOrEqual function" i
toBeLessThanOrEqual($1);$0
endsnippet


snippet tbi "toBeInstanceOf function" i
toBeInstanceOf($1);$0
endsnippet


snippet tbn "toBeNull function" i
toBeNull();$0
endsnippet


snippet tbt "toBeTruthy function" i
toBeTruthy();$0
endsnippet


snippet tbu "toBeUndefined function" i
toBeUndefined();$0
endsnippet


snippet tc "toContain function" i
toContain($1);$0
endsnippet


snippet tce "toContainEqual function" i
toContainEqual($1);$0
endsnippet


snippet te "toEqual function" i
toEqual($1);$0
endsnippet


snippet tm "toMatch function" i
toMatch($1);$0
endsnippet


snippet tmo "toMatchObject function" i
toMatchObject($1);$0
endsnippet


snippet tms "toMatchSnapshot function" i
toMatchSnapshot();$0
endsnippet


snippet tmis "toMatchInlineSnapshot function" i
toMatchInlineSnapshot();$0
endsnippet


snippet tse "toStrictEqual function" i
toStrictEqual($1);$0
endsnippet


snippet tt "toThrow function" i
toThrow($1);$0
endsnippet


snippet ttems "toThrowErrorMatchingSnapshot function" i
toThrowErrorMatchingSnapshot();$0
endsnippet


snippet ttemis "toThrowErrorMatchingInlineSnapshot function" i
toThrowErrorMatchingInlineSnapshot();$0
endsnippet


# Classes

snippet con "Constructor"
constructor() {
  $0
}
endsnippet


snippet get "Getter"
get ${1:property}() {
  $0
}
endsnippet


snippet set "Setter"
set ${1:property}(newValue) {
  $0
}
endsnippet


# Misc Utils

snippet af "Arrow Function" i
${1:()} => $0
endsnippet


snippet map "Map" i
map(${1:item} => ${2:\{\}})
endsnippet


snippet filter "Filter" i
filter(${1:item} => ${2:\{\}})
endsnippet


snippet prom "Promise" i
new Promise((resolve, reject) => {
  ${VISUAL}$0
});
endsnippet


snippet promt "Promise + Try-Catch"
new Promise((resolve, reject) => {
  try {
    ${VISUAL}$0
  } catch ($1) {
    reject($2);
  }
});
endsnippet


snippet then "Promise.then" i
then(${1:()} => {
  $0
})
endsnippet


snippet catch "Promise.catch" i
catch(${1:()} => {
  $0
})
endsnippet


snippet jp "JSON parse" i
JSON.parse(${VISUAL}$0)
endsnippet


snippet js "JSON stringify" i
JSON.stringify(${VISUAL}$0)
endsnippet


snippet bang "Shebang"
#! /usr/bin/env node
endsnippet


snippet mex "Module exports"
module.exports = $0;
endsnippet
